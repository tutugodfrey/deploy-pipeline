def DEPLOY_SERVICE
def GO_VERSION = '1.18.1'

pipeline {
    agent {
        any
    }
    
    parameters {
        string(name: 'repo_git_url', description: 'the repo url to be downloaded ')
        string(name: 'repo', description: 'the repo to be downloaded ')
        string(name: 'sha', description: 'sha commit')
        string(name: 'pr_number', description: 'PR number')
        string(name: 'repo_owner_name', description: 'the repo owner name')
        string(name: 'repo_api_url', description: 'the repo api url')
    }
    
    environment {
        GIT_REPO_NAME = sh(script: "echo \$(basename ${env.GIT_URL} | grep -oP '.*?(?=\\.)')", returnStdout: true).trim()
        GOROOT = "${env.HOME}/.go"
        GOPATH = "${env.WORKSPACE}/go"
        PATH = "${env.PATH}:${env.GOROOT}/bin:${env.GOPATH}/bin"
        REPO_GIT_URL = "${params.repo_git_url}"
        REPO_API_URL = "${params.repo_api_url}"
        REPO_SERVICE = "${params.repo}"
        SHA = "${params.sha}"
        SHORT = sh(script: "echo ${env.SHA} | head -c7", returnStdout: true).trim()
        REPO_OWNER_NAME = "${params.repo_owner_name}"
        PR_NUMBER = "${params.pr_number}"
    }
    
    stages {

        stage('jenkins_job_label') {
            steps {
                script {
                    currentBuild.displayName = "${BUILD_NUMBER} check_premerge ${params.repo} pr-${params.pr_number}"
                }
            }
        }
        
        stage('git_pr_status'){
            steps{
                httpRequest acceptType: 'APPLICATION_JSON', authentication: 'madm-ghe-token',  contentType: 'APPLICATION_JSON', httpMode: 'POST',
                requestBody: '''{
                    "state": "pending",
                    "description": "The build is currently running...",
                    "context": "check_premerge_build"
                }''', 
                responseHandle: 'NONE', url: "${params.repo_api_url}/statuses/${params.sha}", validResponseCodes: '201'
            }
        }

        // stage('dev_prepare') {
        //     steps {
        //         echo 'Preparing...'
        //         echo "${env.REPO_SERVICE}"
        //         echo "${env.REPO_GIT_URL}"
        //         echo "${env.SHA}"
        //         echo "${env.SHORT}"
        //         echo "${env.REPO_OWNER_NAME}"
        //         echo "${env.PR_NUMBER}"
        //         echo "${env.GIT_REPO_NAME}"
                               
        //         //  Pull down cse-deploy
        //         dir("go/src/github.ibm.com/NetworkTribe/cse-deploy"){
        //             git branch: 'master', changelog: false, credentialsId: 'c8619393-2c6e-4729-a340-2eeb16942ef1', poll: false, url: 'git@github.ibm.com:NetworkTribe/cse-deploy.git'
        //         }

        //         //  Pull down repo PR
        //         dir("go/src/github.ibm.com/NetworkTribe/${env.REPO_SERVICE}")
        //         {
        //             checkout([
        //                 $class: 'GitSCM',
        //                 branches: [[name: "FETCH_HEAD"]],
        //                 extensions: [[$class: 'LocalBranch']],
        //                 userRemoteConfigs: [[
        //                     refspec: "+refs/pull/${env.PR_NUMBER}/head:refs/remotes/origin/PR-${env.PR_NUMBER}",
        //                     credentialsId: 'c8619393-2c6e-4729-a340-2eeb16942ef1',
        //                     url: "${env.REPO_GIT_URL}"]]
        //             ])
        //         }
        //     }
        // }
        
        // stage('dev_commit_message_enforcement'){
        //     steps{
        //         echo 'enforcing git commit message to the standards'
        //         sh"""
        //             set +x
        //             . go/src/github.ibm.com/NetworkTribe/cse-deploy/cicd/scripts/enforce_gitcommitmsg.sh
        //             cd ${WORKSPACE}/go/src/github.ibm.com/NetworkTribe/${env.REPO_SERVICE}
        //             gitcommitmsg ${params.sha}
        //         """
        //     }
        // }


        stage('dev_build') {
            steps {
                withCredentials([
                    usernamePassword(credentialsId: 'madm_artifactory', passwordVariable: 'TAAS_KEY', usernameVariable: 'TAAS_USER'),
                    usernamePassword(credentialsId: 'ftp3_user_madm', passwordVariable: 'FTP3PASS', usernameVariable: 'FTP3USER'),
                    string(credentialsId: 'CSE_JENKINS_API_KEY', variable: 'IBMCLOUD_API_KEY'),
                    string(credentialsId: 'cse-github-token', variable: 'GIT_AUTH_TOKEN')
                    ])
                {
                    echo 'Starting. dev_build'
                    sh """ #!/bin/bash
                        set +x
                        # cd $WORKSPACE/go/src/github.ibm.com/NetworkTribe/cse-deploy
                        # export WORKSPACE="$WORKSPACE/go/src/github.ibm.com/NetworkTribe/$REPO_SERVICE"
                        export INSTALL_VAULT=0
                        export INSTALL_IBMCLOUD=0
                        export INSTALL_KUBECTL=0
                        export INSTALL_GO=0
                        export INSTALL_PYTHON=0
                        export INSTALL_HELM=0
                        export INSTALL_GO_VERSION=$GO_VERSION
                        export PIPELINE_NAME="check_premerge_build"
                        export DEPLOY_SERVICE=$REPO_SERVICE
                        export TAAS_USER=$TAAS_USER
                        export TAAS_KEY=$TAAS_KEY
                        export FTP3USER=$FTP3USER
                        export FTP3PASS=$FTP3PASS
                        export CSE_GIT_COMMIT=$SHA
                        export DEPLOY_ENV="cse-cicd-deploy"
                        export LOG_LEVEL=3
                        export GIT_AUTH_USER=x-oauth-basic
                        export GIT_AUTH_TOKEN=$GIT_AUTH_TOKEN
                        pwd
                        echo Hello world
                        // bash -e -c '../cse-deploy/scripts/pipeline_build.sh'
                    """  
                }
            }
        }
    }

    post {
        always
        {   
            echo 'Clean Golang files'
            sh """
                sudo rm -rf /home/madm/go/*
                sudo rm -rf /usr/local/go/*
            """
        }

        cleanup
        {
             cleanWs()
        }

        success 
        {
            httpRequest acceptType: 'APPLICATION_JSON',
            authentication:'madm-ghe-token',
            contentType: 'APPLICATION_JSON',
            httpMode: 'POST',
            requestBody: """{"state": "success",
                "description": "The build was successful.",
                "context": "check_premerge_build",
                "target_url": "${env.BUILD_URL}"
            }""",
            responseHandle: 'NONE',
            url: "${params.repo_api_url}/statuses/${params.sha}",
            validResponseCodes: '201'
        }
        
        unsuccessful 
        {
            httpRequest acceptType: 'APPLICATION_JSON',
            authentication:'madm-ghe-token',
            contentType: 'APPLICATION_JSON',
            httpMode: 'POST',
            requestBody: """{"state": "failure",
                "description": "The build failed.",
                "context": "check_premerge_build",
                "target_url": "${env.BUILD_URL}"
            }""",
            responseHandle: 'NONE',
            url: "${params.repo_api_url}/statuses/${params.sha}",
            validResponseCodes: '201'
       }
    }
}
