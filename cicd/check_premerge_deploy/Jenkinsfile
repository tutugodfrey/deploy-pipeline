def DEPLOY_SERVICE

pipeline {
    agent {
        label 'cicd_pod_slave'
    }
    
    parameters {
        string(name: 'repo_git_url', description: 'the repo url to be downloaded ')
        string(name: 'repo', description: 'the repo to be downloaded ')
        string(name: 'sha', description: 'sha commit')
        string(name: 'pr_number', description: 'PR number')
        string(name: 'repo_owner_name', description: 'the repo owner name')
        string(name: 'repo_api_url', description: 'the repo api url')
    }
    
    environment {
        GIT_REPO_NAME = sh(script: "echo \$(basename ${env.GIT_URL} | grep -oP '.*?(?=\\.)')", returnStdout: true).trim()
        GOROOT = "${env.HOME}/.go"
        GOPATH = "${env.WORKSPACE}/go"
        PATH = "${env.PATH}:${env.GOROOT}/bin:${env.GOPATH}/bin"
        REPO_GIT_URL = "${params.repo_git_url}"
        REPO_API_URL = "${params.repo_api_url}"
        REPO_SERVICE = "${params.repo}"
        SHA = "${params.sha}"
        SHORT = sh(script: "echo ${env.SHA} | head -c7", returnStdout: true).trim()
        REPO_OWNER_NAME = "${params.repo_owner_name}"
        PR_NUMBER = "${params.pr_number}"
    }
    
    stages {
        
        stage('jenkins_job_label') {
            steps {
                script {
                    currentBuild.displayName = "${BUILD_NUMBER} check_premerge ${params.repo} pr-${params.pr_number}"
                }
            }
        }
        
        stage('git_pr_status'){
            steps{
                httpRequest acceptType: 'APPLICATION_JSON', authentication: 'madm-ghe-token',  contentType: 'APPLICATION_JSON', httpMode: 'POST',
                requestBody: '''{
                    "state": "pending",
                    "description": "The build is currently running...",
                    "context": "check_premerge_deploy"
                }''', 
                responseHandle: 'NONE', url: "${params.repo_api_url}/statuses/${params.sha}", validResponseCodes: '201'
            }
        }

        stage('dev_prepare') {
            steps {
                echo 'Preparing...'
                echo "${env.REPO_SERVICE}"
                echo "${env.REPO_GIT_URL}"
                echo "${env.SHA}"
                echo "${env.SHORT}"
                echo "${env.REPO_OWNER_NAME}"
                echo "${env.PR_NUMBER}"
                echo "${env.GIT_REPO_NAME}"
                               
                dir("go/src/github.ibm.com/NetworkTribe/cse-deploy"){
                    git branch: 'master', changelog: false, credentialsId: 'c8619393-2c6e-4729-a340-2eeb16942ef1', poll: false, url: 'git@github.ibm.com:NetworkTribe/cse-deploy.git'
                }

                //  Pull down repo PR
                dir("go/src/github.ibm.com/NetworkTribe/${env.REPO_SERVICE}")
                {
                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: "FETCH_HEAD"]],
                        extensions: [[$class: 'LocalBranch']],
                        userRemoteConfigs: [[
                            refspec: "+refs/pull/${env.PR_NUMBER}/head:refs/remotes/origin/PR-${env.PR_NUMBER}",
                            credentialsId: 'c8619393-2c6e-4729-a340-2eeb16942ef1',
                            url: "${env.REPO_GIT_URL}"]]
                    ])
                }
            }
        }
        
        stage('dev_commit_message_enforcement'){
            steps{
                echo 'enforcing git commit message to the standards'
                sh"""
                    set +x
                    . go/src/github.ibm.com/NetworkTribe/cse-deploy/cicd/scripts/enforce_gitcommitmsg.sh
                    cd ${WORKSPACE}/go/src/github.ibm.com/NetworkTribe/${env.REPO_SERVICE}
                    gitcommitmsg ${params.sha}
                """
            }
        }

       stage('dev_deploy_test') {
            steps {
                withCredentials([
                    string(credentialsId: 'CSE_JENKINS_API_KEY', variable: 'IBMCLOUD_API_KEY'),
                    [$class: 'VaultTokenCredentialBinding', credentialsId: 'c50fc539-6f7f-4a19-9b66-53f7e39daaed', vaultAddr: 'https://vserv-us.sos.ibm.com:8200']
                    ])
                {
                    sh """ #!/bin/bash
                        echo TOKEN=$VAULT_TOKEN
                        export CSE_VAULT_TOKEN=$VAULT_TOKEN
                        cd $WORKSPACE/go/src/github.ibm.com/NetworkTribe/cse-deploy
                        export WORKSPACE="$WORKSPACE/go/src/github.ibm.com/NetworkTribe/$REPO_SERVICE"
                        export JOB_TYPE=deploy
                        export DEPLOY_ENV="cse-cicd-deploy"
                        export PIPELINE_NAME="check_premerge_deploy"
                        export CSE_GIT_COMMIT=$SHA
                        export DEPLOY_SERVICE=$REPO_SERVICE
                        bash -e -c  '../cse-deploy/scripts/pipeline_deploy.sh'
                    """ 
                }
            }
        }
    }

    post {
    
        cleanup
        {
             cleanWs()
        }

        success 
        {
            httpRequest acceptType: 'APPLICATION_JSON',
            authentication:'madm-ghe-token',
            contentType: 'APPLICATION_JSON',
            httpMode: 'POST',
            requestBody: """{"state": "success",
                "description": "The build was successful.",
                "context": "check_premerge_deploy",
                "target_url": "${env.BUILD_URL}"
            }""",
            responseHandle: 'NONE',
            url: "${params.repo_api_url}/statuses/${params.sha}",
            validResponseCodes: '201'
        }
        
        unsuccessful 
        {
            httpRequest acceptType: 'APPLICATION_JSON',
            authentication:'madm-ghe-token',
            contentType: 'APPLICATION_JSON',
            httpMode: 'POST',
            requestBody: """{"state": "failure",
                "description": "The build failed.",
                "context": "check_premerge_deploy",
                "target_url": "${env.BUILD_URL}"
            }""",
            responseHandle: 'NONE',
            url: "${params.repo_api_url}/statuses/${params.sha}",
            validResponseCodes: '201'
       }
    }
}
